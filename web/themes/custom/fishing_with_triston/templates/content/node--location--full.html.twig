{#
/**
 * @file
 * Olivero's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 *
 * @see template_preprocess_node()
 */
#}


<div class="hero">
	<div class="hero-wrapper">
		<div class="overlay"></div>
		<img src="{{ node.field_hero_image.entity.field_media_image.entity.uri.value|image_style('location_hero') }}" alt="{{ node.field_hero_image.entity.field_media_image.alt }}">
		<div class="region location-title-container">
			<div class="location-title">
				<h1>{{label}}</h1>
				<div class="clip"></div>
			</div>
		</div>
	</div>
</div>

<div class="location-description-and-address padding-block-standard">

	<div class="region">

		<div class="location-description-and-address-wrapper">
			<div class="location-description">
				{{ node.field_description.processed }}
			</div>

			<div class="location-address">
				{% if node.field_map_image.entity.field_media_image.entity.uri.value %}
					<img src="{{ node.field_map_image.entity.field_media_image.entity.uri.value|image_style('map_image') }}" alt="{{ node.field_map_image.entity.field_media_image.alt }}" loading="lazy"/>
				{% endif %}
				<a href="http://maps.google.com/?q={{node.field_address.value}}" target="_blank">{{node.field_address.value}}</a>
			</div>

		</div>

	</div>
</div>


{% if node.field_image_carousel is iterable %}

	<section class="image-carousel-container margin-block-standard" data-role="imageCarouselContainer">
		<div class="background"></div>
		<div class="region">
			<div class="image-carousel-wrapper">
				<div class="image-carousel-copy-container">
					{% if node.field_image_carousel_copy.value %}
						{{node.field_image_carousel_copy.processed }}
					{% endif %}
				</div>

				<div class="carousel-photos-container">
					<button class="prev carousel-button" data-role="prevButton">
						Previous
					</button>

					<div class="carousel-slides-container" data-role="imageCarousel" data-current="0">
						{% for slide in node.field_image_carousel %}
							{% set index = ( index | default(0) ) %}
							<div class="image-carousel-slide
																							{{index is same as 0 ? 'active' : '' }}
																							{{index is same as 1 ? 'next-active-slide' : '' }}
																							" data-index="{{index}}" data-role="carouselSlide">
								{% if slide.entity.field_image_carousel_image.entity.field_media_image.entity %}
									<img src="{{ slide.entity.field_image_carousel_image.entity.field_media_image.entity.uri.value|image_style('image_carousel') }}" alt="{{ slide.entity.field_image_carousel_image.entity.field_media_image.entity.field_media_image.alt }}" loading="lazy" data-role="carouselImage"/>
								{% endif %}


								<div class="image-carousel-slide-text-wrapper">
									{% if slide.entity.field_carousel_slide_copy.value %}
										{{slide.entity.field_carousel_slide_copy.processed}}
									{% endif %}
								</div>
							</div>
							{% set index = index + 1 %}
						{% endfor %}

					</div>
					<button class="next carousel-button" data-role="nextButton">
						Next
					</button>
				</div>

			</div>
		</div>
	</section>
{% endif %}


<div class="species padding-block-small">
	<div class="region">
		<h2>Fish Species</h2>
		{% if node.field_fish_species is not empty %}
			<div class="fish-species-list">
				<ul>
					{% for item in node.field_fish_species %}
						<li>{{ item.entity.name.value }}</li>
					{% endfor %}
				</ul>
			</div>
		{% endif %}
	</div>
</div>
